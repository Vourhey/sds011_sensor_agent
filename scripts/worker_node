#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# ROS
import rospy

import sentry_sdk
sentry_sdk.init(rospy.get_param("/sds011/worker/sentry"))

# Standart, System and Third party
from threading import Timer

# AIRA
from robonomics_msgs.msg import Demand, Result

from sds011.station import RpiStation
from sds011.luftdaten_feeder import LufdatenFeeder
from sds011.robonomics_feeder import RobonomicsFeeder


class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        #rospy.Subscriber('/liability/infochan/incoming/demand', Demand, self.on_incoming_demand)

        result_publish = rospy.Publisher('/liability/infochan/eth/signing/result', Result, queue_size=128)

        self.interval = int(rospy.get_param("~interval"))
        self.rpi_station = RpiStation(rospy.get_param("~port"), rospy.get_param("~work_time"))
        self.luftdaten_feeder = LufdatenFeeder()
        self.robonomics_feeder = RobonomicsFeeder(result_publish, rospy.get_param("~geo"))

        rospy.loginfo('Worker node is launched')

    # def on_incoming_demand(self, msg: Demand):
    #     rospy.loginfo('Incoming demand %s...', str(msg))
    #     if msg.model.multihash == rospy.get_param('~model'):
    #         self.send_result(msg)
    #     else:
    #         rospy.loginfo("Demand is not for me")

    def spin(self):
        def send_result():
            rospy.loginfo('Starting process...')

            station_data = self.rpi_station.get_data()
            rospy.loginfo(f"Station Data: {station_data}")

            self.luftdaten_feeder.feed(station_data)
            self.robonomics_feeder.feed(station_data)

            Timer(self.interval, send_result).start()

        send_result()
        rospy.spin()

if __name__ == '__main__':
    WorkerNode().spin()
